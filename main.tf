# Auth Provider
provider "aws" {
  profile = "default"
  region  = "${var.aws-region}"
}

# ACM
# Uncomment the module in order to create the certificate with Terraform.
# module "acm" {
#   source                = "./services/acm"
#   domain                = "${var.domain}"
#   alerternative-domains = "${var.alerternative-domains}"
# }

# Access Identity
module "cloudfront-access-identity" {
  source                      = "./services/cloudfront-access-identity"
  access-identity-description = "${var.access-identity-description}"
}

# S3 Module
module "s3" {
  source                        = "./services/s3/"
  aws-region                    = "${var.aws-region}"
  deployment-env                = "${var.deployment-env}"
  bucket-name                   = "${var.bucket-name}"
  bucket-description            = "${var.bucket-description}"
  cloudfront-access-identity    = "${module.cloudfront-access-identity.myapp-access-identity-arn}"
}

# Cloudfront Module
module "cloudfront" {
  source                      = "./services/cloudfront"
  deployment-env              = "${var.deployment-env}"
  # Uncomment the following line to use the ACM certificate generated by Terraform.
  # acm-certificate-arn       = "${module.acm.certificate-arn}"
  # Comment out the following line if you use the ARN from the ACM module.
  acm-certificate-arn         = "${var.acm-certificate-arn}"
  cloudfront-description      = "${var.cloudfront-description}"
  cloudfront-alias            = "${var.cloudfront-alias}"
  cloudfront-origin           = "${var.cloudfront-origin}"
  s3-website-endpoint         = "${module.s3.s3-website-endpoint}"
  cloudfront-access-identity  = "${module.cloudfront-access-identity.myapp-access-identity-cloudfront}"
}

# Route 53
module "route53" {
  source         = "./services/route53"
  zone-id        = "${var.route53-zone-id}"
  record-name    = "${var.route53-record-name}"
  record-zone-id = "${module.cloudfront.zone-id}"
  domain-name    = "${module.cloudfront.domain-name}"
}

# Terraform
terraform {
  backend "s3" {
    region         = "us-east-2"
    encrypt        = true
    bucket         = "bucket-for-remote-state-storage"
    key            = "key-for-remote-state-storage"
    dynamodb_table = "dynamodb-for-remote-state-lock"
  }
}
